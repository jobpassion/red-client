<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" height="100%" creationComplete="group1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.redrum.flex.util.Rcp;
			import com.redrum.flex.util.Util;
			
			import mx.collections.ArrayCollection;
			import mx.controls.TextArea;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.messaging.Consumer;
			import mx.messaging.Producer;
			import mx.messaging.events.MessageEvent;
			import mx.messaging.messages.AsyncMessage;
			import mx.rpc.AsyncToken;
			import mx.rpc.Responder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import spark.components.Application;
			import spark.components.WindowedApplication;
			import spark.events.TextOperationEvent;
			import spark.formatters.DateTimeFormatter;
			
			private var producer:Producer;
			private var consumer:Consumer;
			var chatService:RemoteObject;
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				
				(FlexGlobals.topLevelApplication as Application).addEventListener("rpc_init", function(){
					chatService = Rcp.getService("chatService");
					var timer:Timer = new Timer(4000);
					timer.addEventListener(TimerEvent.TIMER, function(){
						if(!Rcp._init)
							return;
						var token:AsyncToken = chatService.queryNew(from.text, to.text);
						token.addResponder(new mx.rpc.Responder(receive, Util.fail));
					});
					timer.start();
					
					consumer = new Consumer;
					consumer.destination = "chat_dest";
					consumer.selector = "to='" + from.text + "'";
					consumer.channelSet = Rcp.cs;
					consumer.addEventListener(MessageEvent.MESSAGE, msgReceive);
					consumer.subscribe();
//					consumer.subtopic = "tick";
					producer = new Producer;
					producer.destination = "chat_dest";
					producer.channelSet = Rcp.cs;
//					producer.subtopic = "tick";
				});
				
				statusTimer.addEventListener(TimerEvent.TIMER, onStatusTimer);
				if(null != so.data.from){
					from.text = so.data.from;
				}
				
				if(null != so.data.to){
					to.text = so.data.to;
				}
			}
			function onStatusTimer(e){
				(FlexGlobals.topLevelApplication as WindowedApplication).status = "";
			}
			
			function getDuration(timeMillis){
				var units = [
					{label:"millis",    mod:1000},
					{label:"seconds",   mod:60},
					{label:"minutes",   mod:60},
					{label:"hours",     mod:24},
					{label:"days",      mod:7},
					{label:"weeks",     mod:52}
				];
				var duration = new Object();
				var x = timeMillis;
				for (var i = 0; i < units.length; i++){
					var tmp = x % units[i].mod;
					duration[units[i].label] = tmp;
					x = (x - tmp) / units[i].mod
				}
				var str = "";
				if(duration.weeks > 0)
				str += duration.weeks + " 星期, ";
				if(duration.days > 0)
				str += duration.days + " 天, ";
				if(duration.hours > 0)
				str += duration.hours + " 小时, ";
				if(duration.minutes > 0)
				str += duration.minutes + " 分, ";
				str += duration.seconds + " 秒前在线";
				return str;
			}
			
			function receive(e:ResultEvent){
				var arr:ArrayCollection = ArrayCollection(e.result);
				var status = arr.removeItemAt(0);
				if(status.diff){
					if(status.diff < 10 * 1000){
						statusLable.text = "对方当前在线"; 
						statusLable.setStyle("backgroundColor", 0x00ff00);
					}else{
						var diff = getDuration(status.diff);
						trace(diff);
						statusLable.text = "对方" + diff;
						statusLable.setStyle("backgroundColor", 0xffffff);
						
					}
				}
				var ids:ArrayCollection = new ArrayCollection;
				if(null == arr || arr.length == 0)
					return;
				for(var i=0; i<arr.length; i++){
					handleMsgReceived(arr.getItemAt(i));
					ids.addItem(arr.getItemAt(i).id);
				}
				chatService.setRead(ids);
			}
			var statusTimer:Timer = new Timer(3000, 1);
			var inputTimer:Timer = new Timer(2000, 1);
			
			function msgReceive(e:MessageEvent){
				switch(e.message.headers.type){
					case "msg":{
						handleMsgReceived(e.message.body);
						chatService.setRead(new ArrayCollection([e.message.body.id]));
						break;
					}
						
					case "sys.input":{
						statusTimer.reset();
						statusTimer.start();
						(FlexGlobals.topLevelApplication as WindowedApplication).status = e.message.body.from + "正在输入...";
					}
					
					
				}
			}
			var msgReceivedQuene:ArrayCollection = new ArrayCollection;
			
			function handleMsgReceived(msg){
				var id = msg.id;
//				for(var i=0; i<msgReceivedQuene.length; i++){
//					if(id == msgReceivedQuene.getItemAt(i))
//						return;
//				}
				if(msgReceivedQuene.contains(id)){
					return;
					trace("concend");
				}
				msgReceivedQuene.addItem(id);
//				msgReceivedQuene.source = msgReceivedQuene.source.slice(-30, -1);
//				var date:Date = Date(msg.timestamp);
				content.text += to.text + ":\n    " +msg.message + "\n";
				scroller.validateNow();
//				content.scroller.verticalScrollBar.value = content﻿.scroller.verticalScrollBar.maxHeight;
				scroller.verticalScrollBar.value = scroller.verticalScrollBar.maxHeight;
				scroller.validateNow();
				Rcp.window.notifyUser(NotificationType.CRITICAL);
			}
			var so:SharedObject = SharedObject.getLocal("/");
			
			protected function btn_send_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
//				var chatService:RemoteObject = Rcp.getService("chatService");
//				chatService.send(from.text, to.text, sendMsg.text);
//				chatService.addEventListener(ResultEvent.RESULT, succ);
//				chatService.addEventListener(FaultEvent.FAULT, fault);
				
				
				var message:AsyncMessage = new AsyncMessage();
				message.body = {message:sendMsg.text, to:to.text, from:from.text};
				message.headers = {type:'msg', to:to.text};
				message.clientId = from.text;
//				message.messageId = "msg" + Math.random();
				producer.send(message);
				content.text += from.text + ":" + "\n    " + sendMsg.text + "\n";
				sendMsg.text = "";
				scroller.validateNow();
//				content.scroller.verticalScrollBar.value = content﻿.scroller.verticalScrollBar.maxHeight; 
				scroller.verticalScrollBar.value = scroller.verticalScrollBar.maxHeight;
				scroller.validateNow();
			}
			
			function succ(e){
				trace(e);
			}
			function fault(e){
				trace(e);
			}
			
			protected function sendMsg_keyDownHandler(event:KeyboardEvent):void
			{
				// TODO Auto-generated method stub
				
				if(event.keyCode == 13 && event.ctrlKey){
					btn_send_clickHandler(null);
				}
				
				if(inputTimer.running){
					return;
				}
				inputTimer.reset();
				inputTimer.start();
				var message:AsyncMessage = new AsyncMessage();
				message.body = {to:to.text, from:from.text};
				message.headers = {type:'sys.input', to:to.text};
				message.clientId = from.text;
				//				message.messageId = "msg" + Math.random();
				producer.send(message);
			}
			
			protected function from_changeHandler(event:TextOperationEvent):void
			{
				// TODO Auto-generated method stub
				if(null == consumer)
					return;
				consumer.selector = "to='" + from.text + "'";
				
				so.data.from = from.text;
			}
			
			protected function to_changeHandler(event:TextOperationEvent):void
			{
				// TODO Auto-generated method stub
				so.data.to = to.text;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" gap="1">
		<s:BorderContainer width="100%" height="29">
			<s:layout>
				<s:HorizontalLayout paddingBottom="5" paddingTop="5"/>
			</s:layout>
			<s:Label height="100%" text="你的名字:" textAlign="center" verticalAlign="middle"/>
			<s:TextInput id="from" width="62" height="100%" change="from_changeHandler(event)"/>
			<s:Label height="100%" text="对方名字:" textAlign="center" verticalAlign="middle"/>
			<s:TextInput id="to" width="61" height="100%" change="to_changeHandler(event)"/>
			<s:Label id="statusLable" width="175" height="100%" text="" textAlign="center"
					 verticalAlign="middle"/>
		</s:BorderContainer>
		<!--backgroundImage="@Embed('resources/6241580_100215009346_2.jpg')"-->
		<s:BorderContainer width="100%" height="100%" borderVisible="false">
			<s:Scroller id="scroller" width="100%" height="100%">
				
		<s:RichEditableText id="content" width="100%" height="100%" editable="false" fontSize="16"
							paddingTop="3"/>
			</s:Scroller>
		</s:BorderContainer>
		<s:HGroup width="100%" height="50">
			<s:TextArea id="sendMsg" width="100%" height="100%" fontSize="16"
						keyDown="sendMsg_keyDownHandler(event)"/>
			<s:Button id="btn_send" width="50" height="100%" label="发送"
					  click="btn_send_clickHandler(event)"/>
		</s:HGroup>
	</s:VGroup>
</s:Group>
