<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" height="100%" creationComplete="group1_creationCompleteHandler(event)" xmlns:chat="com.redrum.flex.chat.*">
	<fx:Script>
		<![CDATA[
			import caurina.transitions.Tweener;
			
			import com.redrum.flex.util.Rcp;
			import com.redrum.flex.util.Util;
			
			import flash.utils.setInterval;
			
			import flashx.textLayout.conversion.ConversionType;
			import flashx.textLayout.conversion.TextConverter;
			import flashx.textLayout.edit.EditManager;
			import flashx.textLayout.edit.IEditManager;
			import flashx.textLayout.edit.ISelectionManager;
			import flashx.textLayout.elements.BreakElement;
			import flashx.textLayout.elements.FlowElement;
			import flashx.textLayout.elements.InlineGraphicElement;
			import flashx.textLayout.elements.ParagraphElement;
			import flashx.textLayout.elements.SpanElement;
			import flashx.textLayout.elements.TextFlow;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.TextArea;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.graphics.ImageSnapshot;
			import mx.graphics.codec.JPEGEncoder;
			import mx.messaging.Consumer;
			import mx.messaging.Producer;
			import mx.messaging.events.MessageEvent;
			import mx.messaging.messages.AsyncMessage;
			import mx.rpc.AsyncToken;
			import mx.rpc.Responder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import spark.components.Application;
			import spark.components.Scroller;
			import spark.components.VScrollBar;
			import spark.components.WindowedApplication;
			import spark.events.TextOperationEvent;
			import spark.formatters.DateTimeFormatter;
			import spark.utils.TextFlowUtil;
			
			private var producer:Producer;
			private var consumer:Consumer;
			var chatService:RemoteObject;
			var scrollTimer:Timer = new Timer(100, 1);
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
//				(FlexGlobals.topLevelApplication as Application).addEventListener("rpc_init", function(){
					chatService = Rcp.getService("chatService");
					var timer:Timer = new Timer(4000);
					timer.addEventListener(TimerEvent.TIMER, function(){
						if(!Rcp._init)
							return;
						var token:AsyncToken = chatService.queryNew(from.text, to.text);
						token.addResponder(new mx.rpc.Responder(receive, Util.fail));
					});
					timer.start();
					
					consumer = new Consumer;
					consumer.destination = "chat_dest";
					consumer.selector = "to='" + from.text + "'";
					consumer.channelSet = Rcp.cs;
					consumer.addEventListener(MessageEvent.MESSAGE, msgReceive);
					consumer.subscribe();
//					consumer.subtopic = "tick";
					producer = new Producer;
					producer.destination = "chat_dest";
					producer.channelSet = Rcp.cs;
//					producer.subtopic = "tick";
//				});
				
				statusTimer.addEventListener(TimerEvent.TIMER, onStatusTimer);
				if(null != so.data.from){
					from.text = so.data.from;
				}
				
				if(null != so.data.to){
					to.text = so.data.to;
				}
				dateTimeFormatter.dateTimePattern = "yyyy-MM-dd HH:mm:ss";
				emoPanel.addEventListener("emo_select", function(e:DataEvent){
					focusManager.setFocus(sendMsg);
					(sendMsg.textFlow.interactionManager as EditManager).insertInlineGraphic(e.data, null, null);
					emoPanel.visible = false;
				});
				scrollTimer.addEventListener(TimerEvent.TIMER, scrollCont);
				
				setInterval(function(){
					TextConverter.export(content.textFlow, TextConverter.TEXT_FIELD_HTML_FORMAT, ConversionType.STRING_TYPE);
					var t:TextFlow = TextConverter.importToFlow(TextConverter.export(content.textFlow, TextConverter.TEXT_FIELD_HTML_FORMAT, ConversionType.STRING_TYPE), TextConverter.TEXT_FIELD_HTML_FORMAT);
				}, 1000);
				
				(FlexGlobals.topLevelApplication as WindowedApplication).nativeWindow.addEventListener(Event.ACTIVATE, function(){
					scrollTimer.reset();
					scrollTimer.start();
				});
			}
			
			function scrollCont(e){
				if(!(FlexGlobals.topLevelApplication as WindowedApplication).nativeWindow.active)
					return;
//				var scrollBar:VScrollBar = scroller.verticalScrollBar;
//				scrollBar.value = scrollBar.maximum;
//				scroller.validateNow();
//				
//				if (scrollBar.value != scrollBar.maximum) {
//					scrollBar.value = scrollBar.maximum;
//					scroller.validateNow();
//				}
//				try{
//					content.textFlow.flowComposer.updateAllControllers();
//				}catch(error){}
//				content.verticalScrollPosition += 10000;
//				content.validateNow();
//				
//				if (content.verticalScrollPosition != content.contentHeight - content.height) {
//					content.verticalScrollPosition += 10000;
//					content.validateNow();
//				}
				while(content.textFlow.numChildren > 2 && content.contentHeight > content.height){
					content.textFlow.removeChildAt(0);
					content.validateNow();
				}
				
				
//				try
//				{
//					content.updateAllControllers(); 
//				} 
//				catch(error:Error) 
//				{	
//				}
//				content.appendText("\r");
//				content.validateNow();
//				
//				if (content.verticalScrollPosition != content.contentHeight - content.height) {
//					content.appendText("\r");
//					content.validateNow();
//				}
//				content.verticalScrollPosition += 10000;
				return;
			}
			function onStatusTimer(e){
				(FlexGlobals.topLevelApplication as WindowedApplication).status = "";
			}
			
			function getDuration(timeMillis){
				var units = [
					{label:"millis",    mod:1000},
					{label:"seconds",   mod:60},
					{label:"minutes",   mod:60},
					{label:"hours",     mod:24},
					{label:"days",      mod:7},
					{label:"weeks",     mod:52}
				];
				var duration = new Object();
				var x = timeMillis;
				for (var i = 0; i < units.length; i++){
					var tmp = x % units[i].mod;
					duration[units[i].label] = tmp;
					x = (x - tmp) / units[i].mod
				}
				var str = "";
				if(duration.weeks > 0){
					
				str += duration.weeks + " 星期";
				}else if(duration.days > 0)
					str += duration.days + "天";
				else
				if(duration.hours > 0)
				str += duration.hours + " 小时";
				else
				if(duration.minutes > 0)
				str += duration.minutes + " 分";
				else
					str += duration.seconds + " 秒";
				str += "前在线";
				return str;
			}
			
			function receive(e:ResultEvent){
				var arr:ArrayCollection = ArrayCollection(e.result);
				var status = arr.removeItemAt(0);
				if(status.diff){
					if(status.diff < 10 * 1000){
						statusLable.text = "对方当前在线"; 
						statusLable.setStyle("backgroundColor", 0x00ff00);
					}else{
						var diff = getDuration(status.diff);
						trace(diff);
						statusLable.text = "对方" + diff;
						statusLable.setStyle("backgroundColor", 0xffffff);
						
					}
				}
				var ids:ArrayCollection = new ArrayCollection;
				if(null == arr || arr.length == 0)
					return;
				for(var i=0; i<arr.length; i++){
					handleMsgReceived(arr.getItemAt(i));
					ids.addItem(arr.getItemAt(i).id);
				}
				chatService.setRead(ids);
			}
			var statusTimer:Timer = new Timer(3000, 1);
			var inputTimer:Timer = new Timer(2000, 1);
			
			function msgReceive(e:MessageEvent){
				switch(e.message.headers.type){
					case "msg":{
						handleMsgReceived(e.message.body);
						chatService.setRead(new ArrayCollection([e.message.body.id]));
						break;
					}
						
					case "sys.input":{
						statusTimer.reset();
						statusTimer.start();
						(FlexGlobals.topLevelApplication as WindowedApplication).status = e.message.body.from + "正在输入...";
						break;
					}
					case "sys.wave":{
						wave();
						break;
					}
					case "sys.trans.file":{
						var ba:ByteArray = e.message.body.fileData as ByteArray;
						trace("1" + ba.length);
						var f:File = new File;
						f.save(ba, e.message.body.fileName);
						break;
					}
					case "sys.trans.img":{
						var ba:ByteArray = e.message.body.fileData as ByteArray;
						trace("1" + ba.length);
						var f:File = new File(File.applicationDirectory.nativePath + "/" + e.message.body.fileName);
						var fs:FileStream = new FileStream;
						fs.open(f, FileMode.WRITE);
						fs.writeBytes(ba);
						fs.close();
						TextConverter.export(content.textFlow, TextConverter.TEXT_FIELD_HTML_FORMAT, ConversionType.STRING_TYPE);
						var t:TextFlow = TextConverter.importToFlow(TextConverter.export(content.textFlow, TextConverter.TEXT_FIELD_HTML_FORMAT, ConversionType.STRING_TYPE), TextConverter.TEXT_FIELD_HTML_FORMAT);
						scrollTimer.reset();
						scrollTimer.start();
						break;
					}
					
					
				}
			}
			var msgReceivedQuene:ArrayCollection = new ArrayCollection;
			
			var dateTimeFormatter:DateTimeFormatter = new DateTimeFormatter();
			function handleMsgReceived(msg){
				var id = msg.id;
//				for(var i=0; i<msgReceivedQuene.length; i++){
//					if(id == msgReceivedQuene.getItemAt(i))
//						return;
//				}
				if(msgReceivedQuene.contains(id)){
					return;
					trace("concend");
				}
				trace(msg.timestamp);
				var timestamp:Date = msg.timestamp as Date;
				timestamp.time += 8 * 60 * 60 * 1000;
				trace(dateTimeFormatter.format(timestamp));
				var time = dateTimeFormatter.format(timestamp);
				msgReceivedQuene.addItem(id);
//				msgReceivedQuene.source = msgReceivedQuene.source.slice(-30, -1);
//				var date:Date = Date(msg.timestamp);
//				content.text += to.text + ":          ---------------------" + time + "\n    " +msg.message + "\n";
				var head:ParagraphElement = new ParagraphElement;
				var headText:SpanElement = new SpanElement;
				if(new Date().time - timestamp.time > 5 * 60 * 1000)
					headText.text = (to.text + ":          ---------------------" + time);
				else
					headText.text = (to.text + ":");
				head.addChild(headText);
				content.textFlow.addChild(head);
				var tf:TextFlow = TextConverter.importToFlow(msg.message, TextConverter.TEXT_FIELD_HTML_FORMAT);
				var cs = tf.mxmlChildren;
				for(var i=0; i<cs.length; i++){
					var p:ParagraphElement = new ParagraphElement;
					p.textAlign = "left";
					var pe:ParagraphElement = tf.mxmlChildren[i];
					for each (var fe:FlowElement in pe.mxmlChildren){
						
						p.addChild(fe);
						fe.backgroundColor = 0xBFEFFF;
					}
					p.paddingLeft = 25;
					content.textFlow.addChild(p);
				}
				try{
					content.textFlow.flowComposer.updateAllControllers();
				}catch(error){}
//				scroller.validateNow();
//				content.scroller.verticalScrollBar.value = content﻿.scroller.verticalScrollBar.maxHeight;
//				scroller.verticalScrollBar.value = scroller.verticalScrollBar.maxHeight;
//				content.validateDisplayList();
//				content.validateNow();
//				scroller.validateDisplayList();
//				scroller.validateNow();
//				scroller.verticalScrollBar.value = scroller.verticalScrollBar.maximum + 100;
//				scroller.validateNow();
//				content.verticalScrollPosition += 1000;
//				scroller.validateDisplayList();
//				scroller.validateNow();
				scrollTimer.reset();
				scrollTimer.start();
//				scrollCont(null);
				Rcp.window.notifyUser(NotificationType.CRITICAL);
			}
			var so:SharedObject = SharedObject.getLocal("/");
			
			protected function btn_send_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
//				var chatService:RemoteObject = Rcp.getService("chatService");
//				chatService.send(from.text, to.text, sendMsg.text);
//				chatService.addEventListener(ResultEvent.RESULT, succ);
//				chatService.addEventListener(FaultEvent.FAULT, fault);
				if(!producer){
					return;
				}
				
				var message:AsyncMessage = new AsyncMessage();
				var sendText = TextConverter.export(sendMsg.textFlow, TextConverter.TEXT_FIELD_HTML_FORMAT, ConversionType.STRING_TYPE);
				message.body = {message:sendText, to:to.text, from:from.text};
				message.headers = {type:'msg', to:to.text};
				message.clientId = from.text;
//				message.messageId = "msg" + Math.random();
				producer.send(message);
//				content.text += from.text + ":" + "\n    " + sendMsg.text + "\n";
//				content.appendText(from.text + ":");
				var tf:TextFlow = TextConverter.importToFlow(sendText, TextConverter.TEXT_FIELD_HTML_FORMAT);
				var cs = tf.mxmlChildren;
				for(var i=0; i<cs.length; i++){
					var p:ParagraphElement = new ParagraphElement;
					p.textAlign = "right";
					var pe:ParagraphElement = tf.mxmlChildren[i];
					for each (var fe:FlowElement in pe.mxmlChildren){
						
					p.addChild(fe);
					fe.backgroundColor = 0xFAF0E6;
					}
					p.paddingRight = 10;
					content.textFlow.addChild(p);
				}
				try{
					content.textFlow.flowComposer.updateAllControllers();
				}catch(error){}
				
//				content.textFlow = sendMsg.textFlow;
				sendMsg.text = "";
//				scroller.validateNow();
//				content.scroller.verticalScrollBar.value = content﻿.scroller.verticalScrollBar.maxHeight; 
//				scroller.verticalScrollBar.value = scroller.verticalScrollBar.maxHeight + 1000;
//				scroller.validateNow();
//				content.validateDisplayList();
//				content.validateNow();
//				scroller.validateDisplayList();
//				scroller.validateNow();
				scrollTimer.reset();
				scrollTimer.start();
//				scrollCont(null);
			}
			
			function succ(e){
				trace(e);
			}
			function fault(e){
				trace(e);
			}
			
			protected function sendMsg_keyDownHandler(event:KeyboardEvent):void
			{
				// TODO Auto-generated method stub
				
				if(event.keyCode == 13 && event.ctrlKey){
					btn_send_clickHandler(null);
				}
				
				if(inputTimer.running){
					return;
				}
				inputTimer.reset();
				inputTimer.start();
				var message:AsyncMessage = new AsyncMessage();
				message.body = {to:to.text, from:from.text};
				message.headers = {type:'sys.input', to:to.text};
				message.clientId = from.text;
				//				message.messageId = "msg" + Math.random();
				producer.send(message);
			}
			
			protected function from_changeHandler(event:TextOperationEvent):void
			{
				// TODO Auto-generated method stub
				if(null == consumer)
					return;
				consumer.selector = "to='" + from.text + "'";
				
				so.data.from = from.text;
			}
			
			protected function to_changeHandler(event:TextOperationEvent):void
			{
				// TODO Auto-generated method stub
				so.data.to = to.text;
			}
			
			var emoTimer:Timer = new Timer(10, 1);
			
			protected function emo_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var p = emo.localToGlobal(new Point(0, 0));
				var p2 = this.localToGlobal(new Point);
				trace("" + p);
				trace("" + p2);
				emoPanel.x = p.x;
				emoPanel.y = p.y - emoPanel.height;
				emoPanel.visible = true;
				emoTimer.reset();
				emoTimer.start();
			}
			
			protected function vgroup1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if(!emoTimer.running)
					emoPanel.visible = false;
			}
			
			function wave(){
				var nati:NativeWindow = (FlexGlobals.topLevelApplication as WindowedApplication).nativeWindow;
				nati.alwaysInFront = true;
				nati.activate();
				nati.alwaysInFront = false;
				
				Tweener.addTween(nati, {x:nati.x + 10, time:0.001, onComplete:function(){
					Tweener.addTween(nati, {x:nati.x - 10, y:nati.y - 10, time:0.001, onComplete:function(){
						Tweener.addTween(nati, {x:nati.x - 10, y:nati.y + 10, time:0.001, onComplete:function(){
							Tweener.addTween(nati, {x:nati.x + 10, y:nati.y + 10, time:0.001, onComplete:function(){
								Tweener.addTween(nati, {x:nati.x, y:nati.y - 10, time:0.001, onComplete:function(){
									Tweener.addTween(nati, {x:nati.x + 10, time:0.001, onComplete:function(){
										Tweener.addTween(nati, {x:nati.x - 10, y:nati.y - 10, time:0.001, onComplete:function(){
											Tweener.addTween(nati, {x:nati.x - 10, y:nati.y + 10, time:0.001, onComplete:function(){
												Tweener.addTween(nati, {x:nati.x + 10, y:nati.y + 10, time:0.001, onComplete:function(){
													Tweener.addTween(nati, {x:nati.x, y:nati.y - 10, time:0.001, onComplete:function(){
														nati.alwaysInFront = true;
														nati.activate();
														nati.alwaysInFront = false;
													}});
												}});
											}});
										}});
									}});
								}});
							}});
						}});
					}});
				}});
			}
			
			protected function image1_clickHandler(event:MouseEvent):void
			{
				
				var message:AsyncMessage = new AsyncMessage();
				message.body = {to:to.text, from:from.text};
				message.headers = {type:'sys.wave', to:to.text};
				message.clientId = from.text;
				//				message.messageId = "msg" + Math.random();
				producer.send(message);
				// TODO Auto-generated method stub
				wave();
			}
			
			protected function image2_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var file:File = new File();
				file.browseForOpen("请选择要发送的文件");
//				file.browse();
				file.addEventListener(Event.SELECT, function(){
					var fs:FileStream = new FileStream;
					fs.open(file, FileMode.READ);
					var ba:ByteArray = new ByteArray;
					fs.readBytes(ba, 0, fs.bytesAvailable);
					fs.close();
					trace(ba.length);
					var message:AsyncMessage = new AsyncMessage();
					message.body = {to:to.text, from:from.text, fileData:ba, fileName:file.name};
					message.headers = {type:'sys.trans.file', to:to.text};
					message.clientId = from.text;
					//				message.messageId = "msg" + Math.random();
					producer.send(message);
				});
			}
			
			protected function image3_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var file:File = new File;
				file.browseForOpen("请选择要发送的图片");
				//				file.browse();
				file.addEventListener(Event.SELECT, function(){
					var n =  "tmp/" + new Date().time + file.type;
					var f:File = new File(File.applicationDirectory.nativePath + "/" + n);
					file.copyTo(f);
					var fs:FileStream = new FileStream;
					fs.open(file, FileMode.READ);
					var ba:ByteArray = new ByteArray;
					fs.readBytes(ba, 0, fs.bytesAvailable);
					fs.close();
					trace(ba.length);
					
					focusManager.setFocus(sendMsg);
					var editManager  :  IEditManager  =  sendMsg.textFlow.interactionManager as IEditManager;
					editManager.insertInlineGraphic( n, null, null );
					
					var message:AsyncMessage = new AsyncMessage();
					message.body = {to:to.text, from:from.text, fileData:ba, fileName:n};
					message.headers = {type:'sys.trans.img', to:to.text};
					message.clientId = from.text;
					//				message.messageId = "msg" + Math.random();
					producer.send(message);
				});
			}
			
			protected function screenImg_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:VGroup width="100%" id="vgroup" height="100%" gap="1" click="vgroup1_clickHandler(event)">
		<s:BorderContainer width="100%" height="29">
			<s:layout>
				<s:HorizontalLayout paddingBottom="5" paddingTop="5"/>
			</s:layout>
			<s:Label height="100%" text="你的名字:" textAlign="center" verticalAlign="middle"/>
			<s:TextInput id="from" width="62" height="100%" change="from_changeHandler(event)"/>
			<s:Label height="100%" text="对方名字:" textAlign="center" verticalAlign="middle"/>
			<s:TextInput id="to" width="61" height="100%" change="to_changeHandler(event)"/>
			<s:Label id="statusLable" width="175" height="100%" text="" textAlign="center"
					 verticalAlign="middle"/>
		</s:BorderContainer>
		<!--backgroundImage="@Embed('resources/6241580_100215009346_2.jpg')"-->
		<s:BorderContainer width="100%" height="100%" borderVisible="false">
			<!--<s:Scroller id="scroller" width="100%" height="100%">-->
				
		<s:RichEditableText focusEnabled="true" id="content" width="100%" height="100%" editable="false" fontSize="16"
							paddingTop="3"/>
	<!--		</s:Scroller>-->
		</s:BorderContainer>
		<s:BorderContainer width="100%" height="21" backgroundColor="#B7FFE1"  borderVisible="false">
			<s:layout>
				<s:HorizontalLayout paddingLeft="20"/>
			</s:layout>
			<s:Image width="30" id="emo" click="emo_clickHandler(event)" height="100%" scaleMode="letterbox"
					 source="@Embed('assets/emoticons/grin.png')"/>
			<s:Image width="30" height="100%" scaleMode="letterbox" source="assets/emoticons/angry.png" click="image1_clickHandler(event)"/>
			<s:Image click="image2_clickHandler(event)" width="30" height="100%" source="icons/fujian.png"/>
			<s:Image click="image3_clickHandler(event)" width="30" height="100%" source="icons/pic.png"/>
			<s:Image id="screenImg" click="screenImg_clickHandler(event)" source="icons/screen.png" width="30" height="100%" />
		</s:BorderContainer>
		<s:HGroup width="100%" height="20%">
			<s:RichEditableText id="sendMsg" width="100%" height="100%" fontSize="16"
						keyDown="sendMsg_keyDownHandler(event)"/>
			<s:Button id="btn_send" width="50" height="100%" label="发送"
					  click="btn_send_clickHandler(event)"/>
		</s:HGroup>
	</s:VGroup>
	<chat:EmoticonPanel id="emoPanel" x="0" y="0" visible="false" />
</s:Group>
